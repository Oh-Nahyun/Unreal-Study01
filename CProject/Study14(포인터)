//
//  Study14(포인터).cpp
//  CProject
//
//  Created by 오나현 on 11/29/24.
//

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h> // Standard Input Output

/*
/// 포인터 (*)
/// 속도가 빠르다. & 메모리 상으로도 좋음.(?)
/// 함수에 데이터를 전달할 때 좋다.

/// [ 예시 ] 도로명 주소 = 동 주소
/// 도로명 주소 : 서울 OO구 OO로 NN OO아파트 NN동 NN호
/// 동 주소 : 서울 OO구 OO동 NN-NN
int main()
{
    // 형식은 모두 동일
    int *p1 = NULL;
    int* p2 = NULL; // 권장
    int * p3 = NULL;
    
    // 기본 구조
    int num = 15;
    p1 = &num;
    printf("int 변수 num의 주소 : %d\n", &num); // num의 주소 (& : 레퍼런스)
    printf("포인터 p의 값 : %d\n", p1);
    printf("포인터 p가 가리키는 값 : %d\n", *p1); // 포인터가 가르키는 값
    printf("num의 값 : %d\n", num);
    
    // scanf
    scanf("%d", &num); // [의미] num의 주소에 입력한 정수를 넣어라
    printf("num의 값 : %d\n", num);
    
    return 0;
}

/// 참조 (레퍼런스) 연산자 : *
int main()
{
    int *p1 = NULL;
    int num = 15;
 
    p1 = &num;
    
    printf("int 변수 num의 주소 : %d\n", &num);
    printf("포인터 p의 값 : %d\n", p1);
    printf("포인터 p가 가리키는 값 : %d\n", *p1);
    
    return 0;
}

/// 사용
int main()
{
    int *p1 = NULL;
    int num = 15;
    
    p1 = &num;  // O
    printf("포인터 p가 가리키는 값 : %d\n", *p1);
    printf("num의 값 : %d\n", num);
    
    *p1 += 5;   // O
    printf("포인터 p가 가리키는 값 : %d\n", *p1);
    printf("num의 값 : %d\n", num);
    
    (*p1)++;    // O
    printf("포인터 p가 가리키는 값 : %d\n", *p1);
    printf("num의 값 : %d\n", num);
    
    *p1++;      // X : 증감 연산자(++, --)가 참조 연산자(*)보다 우선순위가 높다!
                //     논리 오류 (p1++가 먼저 되고, 그 후에 *(p1++)이 된다.)
    printf("포인터 p가 가리키는 값 : %d\n", *p1);
    printf("num의 값 : %d\n", num);
    
    return 0;
}

/// 함수와의 궁합
void numPlus(int num)
{
    num += 5;
    printf("numPlus() 내 num의 값 : %d\n", num);
}

int numPlus2(int num)
{
    num += 5;
    printf("numPlus2() 내 num의 값 : %d\n", num);
    
    return num;
}

void numPlus3(int *num)
{
    *num += 5;
    printf("numPlus3() 내 num의 값 : %d\n", *num);
}

int main()
{
    int num = 15;
    printf("num의 값 : %d\n\n", num);
    
    numPlus(num);
    printf("numPlus() 사용 후 num의 값 : %d\n\n", num); // Call by value
    
    int num2 = numPlus2(num);
    printf("numPlus2() 사용 후 num의 값 : %d\n\n", num2);
    
    numPlus3(&num);
    printf("numPlus3() 사용 후 num의 값 : %d\n\n", num); // Call by reference
    
    return 0;
}
 */

/*
/// Call by value & Call by reference
// Call by value
void swap(int a, int b)
{
    int temp = 0;
    
    temp = a;
    a = b;
    b = temp;
    
    printf("[swap 내] a = %d, b = %d\n", a, b);
}

int main()
{
    int a = 10;
    int b = 20;
    
    printf("[swap 전] a = %d, b = %d\n", a, b);
    
    swap(a, b);
    printf("[swap 후] a = %d, b = %d\n", a, b);
    
    return 0;
}

// Call by reference
void swap(int *a, int *b)
{
    int temp = 0;
    
    temp = *a;
    *a = *b;
    *b = temp;
    
    printf("[swap 내] a = %d, b = %d\n", *a, *b);
}

int main()
{
    int a = 10;
    int b = 20;
    
    printf("[swap 전] a = %d, b = %d\n", a, b);
    
    swap(&a, &b);
    printf("[swap 후] a = %d, b = %d\n", a, b);
    
    return 0;
}
 */

/*
/// 실습
/// 포인터로 자리변경하는 프로그램
/// 1. 키가 작은 학생은 왼쪽에, 키가 큰 학생은 오른쪽에 놓는다.
/// 2. 학생들의 키는 정수로 입력받는다.
/// 3. 왼쪽 학생은 left, 오른쪽 학생은 right에 입력받는다.
/// 4. 포인터를 이용해서 값을 교환해보세요.
void swapStudent(int *left, int *right)
{
    if (*left > *right)
    {
        int temp = *left;
        *left = *right;
        *right = temp;
    }
}

int main()
{
    int left = 0;
    int right = 0;
    printf("학생들의 키를 정수로 입력해주세요.\n");
    scanf("%d %d", &left, &right);
    
    swapStudent(&left, &right);
    
    printf("왼쪽 : %d\n", left);
    printf("오른쪽 : %d\n", right);
    
    return 0;
}
 */

/*
/// 포인터 연산 & 배열
// 배열의 이름이 주소값이다.
// 배열의 이름은 포인터 변수와 같은 기능을 한다.
// 첫번째 요소의 주소값을 나타낸다.
int main()
{
    int arr[5] = {10, 20, 30, 40, 50};
    int* arrPointer = arr;
    
    printf("%d\n", *arrPointer);
    printf("%d\n", arr[0]);
    
    return 0;
}

/// 포인터 연산
int main()
{
    int arr[5] = {10, 20, 30, 40, 50};
    double arr2[5] = {10.1, 20.2, 30.3, 40.4, 50.5};
    
    int* arrPointer = arr;
    double* arrPointer2 = arr2;
    
    printf("포인터 주소 : %d %d\n", arrPointer++, arrPointer2++); // 후위 증가 결과 : int형은 4, double형은 8바이트 증가
    printf("증가 연산 후 : %d %d\n", arrPointer, arrPointer2);
    printf("변수의 값 : %d %.2f\n", *arrPointer, *arrPointer2); // '.2f'의 의미 : 소수점 두번째 자리까지 나타낸 소수
    
    arrPointer += 2;
    arrPointer2 += 2; // 증가 결과 : int형은 8, double형은 16바이트 증가
    printf("증가 연산 후 : %d %d\n", arrPointer, arrPointer2);
    printf("변수의 값 : %d %.2f\n", *arrPointer, *arrPointer2);
    
    // i * 자료형의 크기 = 배열 i
    // *(arr + i) == arr[i]
    
    return 0;
}
 */

/*
/// 포인터를 이용한 버블 정렬 (Sort)
/// 10개의 값을 입력받아 오름차순으로 정렬하는 함수를 만든다.
/// 포인터를 이용해서 Main에 있는 원래 배열의 값을 바꾸어야 한다.
/// 바꾼 후 정렬된 배열을 출력한다.
void bubbleSort(int* arr, int length)
{
    int temp = 0;
    for (int i = 0; i < length - 1; i++)
    {
        for (int j = 0; j < length - 1; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                temp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

int main()
{
    int arr[10] = {};
    int length = sizeof(arr) / sizeof(int);
    
    printf("배열에 들어갈 정수를 입력해주세요.(10개)\n");
    printf("입력 : ");
    for (int i = 0; i < length; i++)
    {
        scanf("%d ", &arr[i]);
    }
    
    bubbleSort(arr, length);
    
    printf("출력 : ");
    for (int i = 0; i < length; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
    
    return 0;
}
 */

/*
/// 상수 포인터
int main()
{
    const double PI = 3.141592;
    
    // PI = 7; // 변경 불가
    
    return 0;
}

int main()
{
    int num = 10;
    int* pointer1 = &num;
    const int* pointer2 = &num;
    
    *pointer1 = 20;     // 변경 가능
    num = 30;           // 변경 가능
    // *pointer2 = 40;   // 변경 불가능
    
    return 0;
}
 */

/*
/// 포인터 상수화
int main()
{
    int num1 = 10;
    int num2 = 20;
    
    int* pointer1 = &num1;
    int* const pointer2 = &num1;
    
    pointer1 = &num2;
    *pointer2 = 30;
    // pointer2 = &num2; // 주소 변경 불가능
    
    return 0;
}

/// 포인터 주소 변경과 값 변경 모두 안되는 경우
int main()
{
    int num1 = 10;
    int num2 = 20;
    
    int* pointer1 = &num1;
    const int* const pointer2 = &num1;
    
    pointer1 = &num2;
    // *pointer2 = 30;      // 값 변경 불가능
    // pointer2 = &num2;    // 주소 변경 불가능
    
    return 0;
}
 */

/*
/// 이중 포인터와 포인터 배열
/// 두 번 재활용을 위함 & 메모리와 빠른 속도를 위함
/// (DirectX에서 주로 사용)
int main()
{
    int num = 10;
    int* ptr;
    int** pptr;
    
    ptr = &num;
    pptr = &ptr;
    
    printf("num : %d, *ptr : %d, **ptr : %d\n", num, *ptr, **pptr);
    printf("num 주소 : %d, *ptr 값 : %d, **ptr 값 : %d\n", &num, ptr, *pptr);
    printf("ptr 주소 : %d, pptr 값 : %d\n", &ptr, pptr);
    
    return 0;
}
 */

/*
/// 포인터 배열
int main()
{
    int num1 = 10;
    int num2 = 20;
    int num3 = 30;
    
    int *pArr[3]; // 주소값 배열
    pArr[0] = &num1;
    pArr[1] = &num2;
    pArr[2] = &num3;
    
    for (int i = 0; i < 3; i++)
    {
        printf("pArr[%d] : %d\n", i, *pArr[i]);
    }
    
    return 0;
}
*/

/*
/// 내용 정리
int main()
{
    int arr[5] = {1, 3, 5, 7, 9};
    double arr2[5] = {1.1, 3.2, 5.3, 7.4, 9.5};
    int* arrPtr = arr;
    double* arrPtr2 = arr2;
    
    printf("%d %lf %d %d\n", *arrPtr, *arrPtr2, arrPtr, arrPtr2);
    
    (*arrPtr)++;    // 포인터 값 증가
    *arrPtr2++;     // 포인터 주소 증가
    
    printf("%d %lf %d %d\n", *arrPtr, *arrPtr2, arrPtr, arrPtr2);
    
    return 0;
}
 */
