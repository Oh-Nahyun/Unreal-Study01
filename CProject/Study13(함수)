//
//  Study13(함수).cpp
//  CProject
//
//  Created by 오나현 on 11/27/24.
//

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

/*
/// 함수 (F(x)) function : 특정한 기능을 따로 분리해놓은 것
/// 메인 함수
int main()
{
    return 0;
}

/// 함수 구조
//[반환형] [함수명] [매개변수]
//{
//    호출 시에 작동될 함수 내부 코드
//}

/// 함수 예시
//int main(void)
//int printf(int arr[])
//int printf(int arr[], int length)

/// 함수의 장점
// 1. 유지보수 및 가독성 증진
// 2. 재활용성 강화
 */

/*
/// =======================================================
int main()
{
    // 선언
    int arr[] = {1, 2, 3, 4, 5};
    int result = 0;
    int length = sizeof(arr) / sizeof(int);
    
    // 계산
    for (int i = 0; i < length; i++)
    {
        result += arr[i];
    }
    
    // 출력
    printf("모든 배열의 합 : %d\n", result);
    
    return 0;
}
 */

/*
/// =======================================================
int arrayPlus(int arr[], int length)
{
    // 지역 변수 선언
    int result = 0;
    
    // 계산
    for (int i = 0; i < length; i++)
    {
        result += arr[i];
    }
    
    return result;
}

int main()
{
    // 선언
    int arr[] = {1, 2, 3, 4, 5};
    int result = 0;
    int length = sizeof(arr) / sizeof(int);
    
    // 함수 사용
    result = arrayPlus(arr, length);
    
    // 출력
    printf("모든 배열의 합 : %d\n", result);
    
    return 0;
}
*/

/*
/// =======================================================
int arrayPlus(int arr2[], int length2)
{
    // 지역 변수 선언
    int result2 = 0;
    
    // 계산
    for (int i = 0; i < length2; i++)
    {
        result2 += arr2[i];
    }
    
    return result2;
}

void printfs()
{
    printf("=====================\n");
    printf("| 그냥 글만 출력하는 중.. |\n");
    printf("| 그냥 글만 출력하는 중.. |\n");
    printf("| 그냥 글만 출력하는 중.. |\n");
    printf("=====================\n");
}

int main()
{
    // 선언
    int result = 0;
    
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(int);
    
    int arr2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int length2 = sizeof(arr2) / sizeof(int);
    
    // 함수 사용
    result = arrayPlus(arr, length);
    printf("arr 배열의 합 : %d\n", result);
    
    printfs();
    
    result = arrayPlus(arr2, length2);
    printf("arr2 배열의 합 : %d\n", result);
    
    printfs();
    
    return 0;
}
*/

/*
/// =======================================================?????????????????????
int arrayPlus(int arr2[])
{
    // 지역 변수 선언
    int result2 = 0;
    int length2 = sizeof(arr2) / sizeof(arr2[0]);
    
    // 계산
    for (int i = 0; i < length2; i++)
    {
        result2 += arr2[i];
    }
    
    return result2;
}

void printfs()
{
    printf("=====================\n");
    printf("| 그냥 글만 출력하는 중.. |\n");
    printf("| 그냥 글만 출력하는 중.. |\n");
    printf("| 그냥 글만 출력하는 중.. |\n");
    printf("=====================\n");
}

int main()
{
    // 선언
    int result = 0;
    
    int arr[] = {1, 2, 3, 4, 5};
    int arr2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // 함수 사용
    result = arrayPlus(arr);
    printf("arr 배열의 합 : %d\n", result);
    
    printfs();
    
    result = arrayPlus(arr2);
    printf("arr2 배열의 합 : %d\n", result);
    
    printfs();
    
    return 0;
}
 */

/*
/// 함수의 선언의 위치1
void func1(void)
{
    printf("반환할 필요도 없고, 인자도 받지 않는 void인 함수입니다.\n");
}

void func2(int num)
{
    printf("반환할 필요도 없고, 받은 인자는 %d인 함수입니다.\n", num);
}

float func3(int num)
{
    printf("인자의 형과 반환형을 맞춰줄 필요는 없습니다.\n");
    
    return 3.14 * num;
}

int main()
{
    float result = 0.0f;
    
    func1();
    func2(2);
    result = func3(3);
    
    printf("result : %f\n", result);
    
    return 0;
}
*/

/*
/// 함수의 선언의 위치2
/// (main 함수가 다른 함수보다 위에 있는 경우, 에러)
/// (main 함수 외의 함수를 아래에 작성하고 싶은 경우, 위쪽에 선언을 해줘야 한다.)
void func1(void);
void func2(int num);
float func3(int num);
 
int main()
{
    float result = 0.0f;
    
    func1();
    func2(2);
    result = func3(3);
    
    printf("result : %f\n", result);
    
    return 0;
}

void func1(void)
{
    printf("반환할 필요도 없고, 인자도 받지 않는 void인 함수입니다.\n");
}

void func2(int num)
{
    printf("반환할 필요도 없고, 받은 인자는 %d인 함수입니다.\n", num);
}

float func3(int num)
{
    printf("인자의 형과 반환형을 맞춰줄 필요는 없습니다.\n");
    
    return 3.14 * num;
}
 */

/*
/// 함수 연습
/// 두 수의 합을 구하는 함수를 만들어서 사용한 후 출력하는 프로그램
/// 1. scanf 사용, 정수 2개 받는다.
/// 2. 두 수의 합을 구하는 함수를 구현한다.
/// 3. 입력받은 값들을 함수로 넘긴다.
/// 4. 두 수의 합을 구해서 반환한다.
/// 5. 함수의 반환값은 result 변수에 저장한다.
/// 6. 반환받은 값(result)를 출력한다.
int sumNum(int, int); // 불친절한 함수 선언 (컴파일러(컴퓨터)는 알아본다.)
//int sumNum(int height, int speed); // 친절한 함수 선언

int main()
{
    int num1 = 0;
    int num2 = 0;
    
    printf("두 수를 입력해주세요. : ");
    scanf("%d %d", &num1, &num2);
    
    int result = sumNum(num1, num2);
    printf("두 수의 합 : %d\n", result);
    
    return 0;
}

int sumNum(int a, int b)
{
    return a + b;
}
*/

/// 전역 변수 & 지역 변수 (Global & Local)
/// 지역 변수 : 한 지역 내에서만 사용할 수 있는 변수
/// 지역 : { } 중괄호에 의해 만들어지는 영역
/// ==================================================
/*
/// 잘못된 경우
int functionTest()
{
    int temp = 0;
    temp += result;
    
    return temp;
}

int main()
{
    int result = 10;
    printf("result 결과값 : %d\n", functionTest());
    
    return 0;
}
 */

/// ==================================================
int global = 10;

void globalTest()
{
    global += 5;
    printf("함수 내 전역 변수 : %d\n", global);
}

int main()
{
    int local = 10;
    // global += 100; // 모든 global 변수의 값이 변경된다.
    printf("전역 변수 : %d\n", global);
    printf("지역 변수 : %d\n", local);
    
    globalTest();
    
    return 0;
}
